1.Symbol table :

main:
#include<stdio.h> 
#include<ctype.h> 
#include<string.h> 
struct symtab
{
int lineno;
char var[25],dt[25],val[10];
}sa[20];

void main()
{

int i=0,j,k,max,f=0,xx,h,m,n,l,r,ty=1,m1,line=0;
char s[25],typ[25],temp[25],gar[]="garbage",t[25],got[10],e[10]; float m2;
FILE *fn,*ft,*fp;
fn=fopen("input.txt","r");
printf("\n\nSYMBOL TABLE MANAGEMENT\n\n"); 
printf("Variable\tDatatype\tLine.no.\t\tValue\n");
while(!(feof(fn)))
{
fscanf(fn,"%s",s); if((strcmp(s,"int")==0)||(strcmp(s,"float")==0))
{
strcpy(typ,s); line++; while(s,";"!=0)
 
{ i++;
max=i;	sa[i].lineno=line; fscanf(fn,"%s",s);
strcpy(sa[i].var,s);
strcpy(sa[i].dt,typ);


fscanf(fn,"%s",s);
if(strcmp(s,"=")==0)
{
fscanf(fn,"%s",s);
strcpy(sa[i].val,s);
fscanf(fn,"%s",s);
}
else
strcpy(sa[i].val,gar);
if(strcmp(s,",")==0)
continue; else break;
}
}
else if(strcmp(s,"char")==0)
{
strcpy(typ,s); line++; while(strcmp(s,";")!=0)
{
i++;
max=i; sa[i].lineno=line; fscanf(fn,"%s",s);
strcpy(sa[i].var,s);
strcpy(sa[i].dt,typ);
fscanf(fn,"%s",s);
if(strcmp(s,"=")==0)
{
fscanf(fn,"%s",s);
fscanf(fn,"%s",s);
strcpy(sa[i].val,s);
fscanf(fn,"%s",s);
fscanf(fn,"%s",s);
}

 
}//while



}//while
 

fscanf(fn,"%s",s);
if(strcmp(s,",")==0)
continue;
}//else if
 

for(i=1;i<=max;i++) printf("\n%s\t\t%s\t\t%d\t\t%s\n",sa[i].var,sa[i].dt,sa[i].lineno,sa[i].val);
 
fclose(fn);

}


input.txt:
int a , b = 5 ;
float c ; 
char d = " a " ; 


2.Shift Reducer parsing
#include<stdio.h>
#include<string.h>
struct stack 
{ char s[20]; int top; }; struct stack st; int isempty() { return (st.top==1); 
} 
void push(char p) 
{ st.s[st.top++]=p; 
} char pop() 
{ if(isempty()) printf("stack empty"); 
else return st.s[st.top--]; 
} 
void disp() 
{ int i; for(i=0;i<st.top;i++) printf("%c",st.s[i]); 
} 
int reduce(int *j,char rp[10][10],int n) 
{ int i,t,k; char u[10]; t=st.top-1; 
for (i=0;i<=st.top;i++) 
{   u[i]=st.s[t]; u[i+1]='\0'; for(k=0;k<n;k++) 
{ if(strcmp(rp[k],u)==0) 
{ st.top=st.top-i-1; return k; 
} 
} 
t--; } return 99; 
} 
int shift(char ip[],int *j) 
{ push(ip[*j]); (*j)++; disp(); return 1; 
} 
void main() 
{ int n,i,j=0,k,h; char lp[10]; char ip[10]; char rp[10][10]; st.top=0; 
printf("\nEnter the number of productions:"); 
scanf("%d",&n); for(i=0;i<n;i++) 
{ 	printf("\nEnter the left side of the production %d:",i+1); scanf(" %c",&lp[i]); 
printf("\nEnter the right side of the production %d:",i+1); scanf("%s",rp[i]); 
} 
printf("\nEnter the input:"); scanf("%s",ip); 
printf("================================================================="); 
	printf("\nSTACK 	INPUT 	OUTPUT 	"); 
printf("\n=================================================================\n"); 
strcat(ip,"$"); 
push('$'); 
printf("$ 	%s 	\n",ip); while(!(st.s[st.top-1]==lp[0]&&st.s[st.top-2]=='$'&&(j==(strlen(ip)-1))&&st.top==2)) 
{ if((h=reduce(&j,rp,n))!=99) 
{ push(lp[h]);disp();printf("\t\t\t"); for(k=j;k<strlen(ip);k++) printf("%c",ip[k]); 
printf("\t\t\tReduce %c->%s\n",lp[h],rp[h]); 
} else if(shift(ip,&j)) 
{ 	printf("\t\t\t"); for(k=j;k<strlen(ip);k++) 
printf("%c",ip[k]); 
printf("\t\t\tshift %c\n",ip[j-1]); } } disp(); printf("\t\t\t"); for(k=j;k<strlen(ip);k++) printf("%c",ip[k]); 
printf("\t\t\taccept\n"); 
} 


3.Code Optimize
#include<stdio.h> 
#include<string.h> 
struct op { char l; char r[20]; }op[10],pr[10]; 
 
void main() 
{
    int a,i,k,j,n,z=0,m,q; char *p,*l,*tem,temp,t; char nu[]="\0"; 
printf("\nEnter the no of values:"); 
scanf("%d",&n); for(i=0;i<n;i++) 
{ printf("\nLeft "); scanf("%s",&op[i].l); printf("Right "); scanf("%s",op[i].r); 
} 
 
printf("\nIntermediate code\n"); for(i=0;i<n;i++) 
printf("%c=%s\n",op[i].l,op[i].r); 
 
for(i=0;i<n;i++) 
{ temp=op[i].l; p=NULL; 
for(j=0;j<n;j++) { p=strchr(op[j].r,temp); 
if(p) { pr[z].l=op[i].l; strcpy(pr[z].r,op[i].r); 
 
z++; break; } 
} 
} 
 
printf("\nAfter dead code elimination\n"); for(k=0;k<z;k++) printf("%c\t=%s\n",pr[k].l,pr[k].r); 
 
for(m=0;m<z;m++) 
{ tem=pr[m].r; for(j=m+1;j<z;j++) 
{ p=strstr(tem,pr[j].r); 
if(p) { pr[j].l=pr[m].l; for(i=0;i<z;i++) { 
if(l) { a=l-pr[i].r; pr[i].r[a]=pr[m].l; 
} 
} 
} 
} } 
printf("\nEliminate common expression\n"); 
for(i=0;i<z;i++) printf("%c\t=%s\n",pr[i].l,pr[i].r); for(i=0;i<z;i++) { for(j=i+1;j<z;j++) 
{ 
q=strcmp(pr[i].r,pr[j].r); if((pr[i].l==pr[j].l)&&!q) 
{ pr[i].l='\0'; strcpy(pr[i].r,nu); 
} 
} 
} 
 
printf("\nOptimized code\n"); for(i=0;i<z;i++) if(pr[i].l!='\0') 
printf("%c\t=%s\n",pr[i].l,pr[i].r); 
} 


4.Frontend
#include<stdio.h> 
#include<ctype.h>
#include<string.h> 
int ag=0,z=1;
void main() 
{ char 
a[50],id[50],b[50],op[50],mov[]="MOVF",mul[]="MULF",div[]="DIVF",add[]="ADDF",sub[] 
= "SUBF",ti=0; 
int i=0,j=0,k=0,len=0,s=0,e=0,r=1,count; FILE *fp; fp=fopen("out.txt","w"); printf("\nEnter the code:"); scanf("%s",a); strcpy(b,a); len=strlen(a); for ( i=0;i<strlen(b);i++ ){ if ( b[i] == '*' || b[i] == '/' ){ 
for ( j=i-1;b[j]!='-'&&b[j]!='+'&&b[j]!='*'&&b[j]!='/'&&b[j]!='=';j--); k=j+1; count=0; 
printf("\nt%d=",ti++); 
for ( j=j+1;count<2&&b[j]!='\0';j++ ){ 
if ( b[j+1] == '+' || b[j+1] == '-' || b[j+1] == '*' || b[j+1] == '/' ) count++; printf("%c",b[j]); 
} b[k++]='t'; b[k++]=ti-1+48; 
for ( j=j,k=k;k<strlen(b);k++,j++ ) b[k]=b[j]; i=0; } } for ( i=0;i<strlen(b);i++ ){ 
if ( b[i] == '+' || b[i] == '-' ){ 
for ( j=i-1;b[j]!='-'&&b[j]!='+'&&b[j]!='=';j--); k=j+1; count=0; 
printf("\nt%d=",ti++); 
for ( j=j+1;count<2&&b[j]!='\0';j++ ) 
{ 
if ( b[j+1] == '+' || b[j+1] == '-' ) 
count++; printf("%c",b[j]); 
} b[k++]='t'; b[k++]=ti-1+48; 
for ( j=j,k=k;k<strlen(b);k++,j++ ) b[k]=b[j]; 
} } 
printf("\n%s",b); 
} 


5.BackEnd
#include<stdio.h>
#include<ctype.h>
#include<string.h>
int ag=0,z=1;
void main()
{
char
a[50],id[50],mov[]="MOVF",mul[]="MULF",div[]="DIVF",add[]="ADDF",sub[]="SUBF";
int i=0,j=0,len=0,s=0,e=0,r=1;
FILE *fp;
fp=fopen("out.txt","w");
printf("\nEnter the code:");
gets(a);
len=strlen(a);
for(i=0;i<len;i++)
{
if(a[i]=='=')
{
for(j=i;j<len;j++)
if(a[j]=='i')
{
fprintf(fp,"\n%s ",mov);
fprintf(fp,"%c%c%c,R%d",a[j],a[j+1],a[j+2],r++);
}
}
else if((a[i]<=57)&&(a[i]>=48))
if((a[i+1]<=57)&&(a[i+1]>=48))
fprintf(fp,"\n%s #%c%c,R%d",mov,a[i],a[i+1],r++);
}
for(i=len-1;i>=0;i--)
{
if(a[i]=='+')
{
fprintf(fp,"\n%s ",add);
e=a[i-1];
e--;
s=e;
if(a[i+1]=='i')
fprintf(fp,"R%c,R%d",e,r-1);
}
else if(a[i]=='-')
{
fprintf(fp,"\n%s ",sub);
e=a[i-1];
e--;
s=e;
if(a[i+1]=='i')
fprintf(fp,"R%c,R%c",(a[i+3]-1),s);
else
fprintf(fp,"R%c,R%d",e,r-1);
}
else if(a[i]=='*')
{
fprintf(fp,"\n%s ",mul);
e=a[i-1];
e--;
s=e;
if(a[i+1]=='i')
fprintf(fp,"R%c,R%c",(a[i+3]-1),s);
else
fprintf(fp,"R%c,R%d",e,r-1);
}
else if(a[i]=='/')
{
fprintf(fp,"\n%s ",div);
e=a[i-1];
e--;
s=e;
if(a[i+1]=='i')
fprintf(fp,"R%c,R%c",(a[i+3]-1),s);
else
fprintf(fp,"R%c,R%d",e,r-1);
}
}
fprintf(fp,"\n%s R1,id1",mov);
}



out.txt

MOVF id2,R1
MOVF id3,R2
MOVF id4,R3
ADDF R2,R3
MULF R2,R1
MOVF R1,id1

6.Lexical analyzer using C


#include <stdio.h>
#include <stdlib.h>
#include <string.h>

const int keywordsLength = 3;
const int operatorsLength = 2;
const int symbolsLength = 5;

char *keywords[3] = {"void", "int", "main"};
char *operator[2] = {"+", "="};
char *symbols[5] = {"(", ")", "{", "}", ";"};

void clearToken(char token[], int size) {
    for (int i = 0; i < size; i++) {
        token[i] = '\0';
    }
}

void processToken(char token[], int size) {
    if (size == 0) {
        return;
    }
    for (int i = 0; i < keywordsLength; ++i) {
        if (strcmp(token, keywords[i]) == 0) {
            printf("%s |(keyword)\n", keywords[i]);
            return;
        }
    }
    for (int i = 0; i < operatorsLength; ++i) {
        if (strcmp(token, operator[i]) == 0) {
            printf("%s |(operator)\n", operator[i]);
            return;
        }
    }
    for (int i = 0; i < symbolsLength; ++i) {
        if (strcmp(token, symbols[i]) == 0) {
            printf("%s |(symbol)\n", symbols[i]);
            return;
        }
    }
}

void logic(char buffer[], int size) {
    char *temp = (char *)malloc((size + 1) * sizeof(char));
    int tempIndex = 0;
    for (int i = 0; i < size; i++) {
        if (buffer[i] == ' ' || buffer[i] == '\n') {
            temp[tempIndex] = '\0';
            processToken(temp, tempIndex);
            clearToken(temp, tempIndex);
            tempIndex = 0;
            continue;
        }
        temp[tempIndex] = buffer[i];
        tempIndex++;
    }
    free(temp);
}

int main() {
    FILE *file;
    file = fopen("add.txt", "r");
    if (file == NULL) {
        perror("Error opening file");
        return 1;
    }

    fseek(file, 0L, SEEK_END);
    int lSize = ftell(file);
    rewind(file);

    char *buffer = (char *)malloc((lSize + 1) * sizeof(char));
    fread(buffer, lSize, 1, file);
    buffer[lSize] = '\0';

    logic(buffer, lSize);

    fclose(file);
    free(buffer);

    printf("________________\n");

    return 0;
}

add.txt
void main ( )
{
int a = 10 ;
int b = 10 ;
int c = a + b ;
}


